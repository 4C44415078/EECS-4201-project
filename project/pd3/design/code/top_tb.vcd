$version Generated by VerilatedVcd $end
$timescale 1ns $end
 $scope module TOP $end
  $scope module $unit $end
   $var wire 32 f ZERO [31:0] $end
   $var wire 21 k jtype_insn__Vstatic__imm_jtype [20:0] $end
  $upscope $end
  $scope module top_tb $end
   $var wire 1 \ clk $end
   $var wire 1 a rst $end
   $var wire 32 b DWIDTH [31:0] $end
   $var wire 32 b AWIDTH [31:0] $end
   $var wire 32 # insn [31:0] $end
   $scope module hut $end
    $var wire 32 b AWIDTH [31:0] $end
    $var wire 32 b DWIDTH [31:0] $end
    $var wire 1 \ clk $end
    $var wire 1 a reset $end
    $var wire 32 c addr_i [31:0] $end
    $var wire 32 d data_i [31:0] $end
    $var wire 1 a write_en $end
    $var wire 1 e read_en $end
    $var wire 32 ] f_pc [31:0] $end
    $var wire 32 $ f_insn [31:0] $end
    $var wire 32 ^ d_pc [31:0] $end
    $var wire 32 $ d_insn [31:0] $end
    $var wire 7 % d_opcode [6:0] $end
    $var wire 5 & d_rd [4:0] $end
    $var wire 5 O d_rs1 [4:0] $end
    $var wire 5 ' d_rs2 [4:0] $end
    $var wire 7 ( d_funct7 [6:0] $end
    $var wire 3 ) d_funct3 [2:0] $end
    $var wire 5 P d_shamt [4:0] $end
    $var wire 32 Q d_imm [31:0] $end
    $var wire 32 Q igen_imm [31:0] $end
    $var wire 1 * c_pcsel $end
    $var wire 1 R c_immsel $end
    $var wire 1 S c_regwren $end
    $var wire 1 T c_rs1sel $end
    $var wire 1 + c_rs2sel $end
    $var wire 1 , c_memren $end
    $var wire 1 - c_memwren $end
    $var wire 2 U c_wbsel [1:0] $end
    $var wire 4 V c_alusel [3:0] $end
    $var wire 5 O r_rs1 [4:0] $end
    $var wire 5 ' r_rs2 [4:0] $end
    $var wire 5 & r_rd [4:0] $end
    $var wire 32 _ r_rs1data [31:0] $end
    $var wire 32 . r_rs2data [31:0] $end
    $var wire 32 f r_rddata [31:0] $end
    $var wire 32 W e_rs1 [31:0] $end
    $var wire 32 X e_rs2 [31:0] $end
    $var wire 32 Y e_res [31:0] $end
    $var wire 32 ^ e_pc [31:0] $end
    $var wire 1 ` e_brtaken $end
    $scope module control1 $end
     $var wire 32 b DWIDTH [31:0] $end
     $var wire 32 $ insn_i [31:0] $end
     $var wire 7 % opcode_i [6:0] $end
     $var wire 7 ( funct7_i [6:0] $end
     $var wire 3 ) funct3_i [2:0] $end
     $var wire 1 * pcsel_o $end
     $var wire 1 R immsel_o $end
     $var wire 1 S regwren_o $end
     $var wire 1 T rs1sel_o $end
     $var wire 1 + rs2sel_o $end
     $var wire 1 , memren_o $end
     $var wire 1 - memwren_o $end
     $var wire 2 U wbsel_o [1:0] $end
     $var wire 4 V alusel_o [3:0] $end
    $upscope $end
    $scope module decode1 $end
     $var wire 32 b DWIDTH [31:0] $end
     $var wire 32 b AWIDTH [31:0] $end
     $var wire 1 \ clk $end
     $var wire 1 a rst $end
     $var wire 32 $ insn_i [31:0] $end
     $var wire 32 ] pc_i [31:0] $end
     $var wire 32 ^ pc_o [31:0] $end
     $var wire 32 $ insn_o [31:0] $end
     $var wire 7 % opcode_o [6:0] $end
     $var wire 5 & rd_o [4:0] $end
     $var wire 5 O rs1_o [4:0] $end
     $var wire 5 ' rs2_o [4:0] $end
     $var wire 7 ( funct7_o [6:0] $end
     $var wire 3 ) funct3_o [2:0] $end
     $var wire 5 P shamt_o [4:0] $end
     $var wire 32 Q imm_o [31:0] $end
    $upscope $end
    $scope module e_alu1 $end
     $var wire 32 b DWIDTH [31:0] $end
     $var wire 32 b AWIDTH [31:0] $end
     $var wire 32 ^ pc_i [31:0] $end
     $var wire 32 W rs1_i [31:0] $end
     $var wire 32 X rs2_i [31:0] $end
     $var wire 3 ) funct3_i [2:0] $end
     $var wire 7 ( funct7_i [6:0] $end
     $var wire 7 % opcode_i [6:0] $end
     $var wire 32 Q imm_i [31:0] $end
     $var wire 4 V alusel_i [3:0] $end
     $var wire 32 Y res_o [31:0] $end
     $var wire 1 ` brtaken_o $end
     $var wire 1 Z breq $end
     $var wire 1 [ brlt $end
     $scope module bc $end
      $var wire 32 b DWIDTH [31:0] $end
      $var wire 7 % opcode_i [6:0] $end
      $var wire 3 ) funct3_i [2:0] $end
      $var wire 32 W rs1_i [31:0] $end
      $var wire 32 X rs2_i [31:0] $end
      $var wire 1 Z breq_o $end
      $var wire 1 [ brlt_o $end
     $upscope $end
    $upscope $end
    $scope module fetch1 $end
     $var wire 32 b DWIDTH [31:0] $end
     $var wire 32 b AWIDTH [31:0] $end
     $var wire 32 g BASEADDR [31:0] $end
     $var wire 1 \ clk $end
     $var wire 1 a rst $end
     $var wire 32 ] pc_o [31:0] $end
     $var wire 32 h insn_o [31:0] $end
     $var wire 32 ^ pc [31:0] $end
    $upscope $end
    $scope module igen1 $end
     $var wire 32 b DWIDTH [31:0] $end
     $var wire 7 % opcode_i [6:0] $end
     $var wire 32 $ insn_i [31:0] $end
     $var wire 32 Q imm_o [31:0] $end
    $upscope $end
    $scope module memory1 $end
     $var wire 32 b AWIDTH [31:0] $end
     $var wire 32 b DWIDTH [31:0] $end
     $var wire 32 i BASE_ADDR [31:0] $end
     $var wire 1 \ clk $end
     $var wire 1 a rst $end
     $var wire 32 ] addr_i [31:0] $end
     $var wire 32 d data_i [31:0] $end
     $var wire 1 e read_en_i $end
     $var wire 1 a write_en_i $end
     $var wire 32 $ data_o [31:0] $end
    $upscope $end
    $scope module register_file1 $end
     $var wire 32 b DWIDTH [31:0] $end
     $var wire 1 \ clk $end
     $var wire 1 a rst $end
     $var wire 5 O rs1_i [4:0] $end
     $var wire 5 ' rs2_i [4:0] $end
     $var wire 5 & rd_i [4:0] $end
     $var wire 32 f datawb_i [31:0] $end
     $var wire 1 S regwren_i $end
     $var wire 32 _ rs1data_o [31:0] $end
     $var wire 32 . rs2data_o [31:0] $end
     $var wire 32 / x[0] [31:0] $end
     $var wire 32 0 x[1] [31:0] $end
     $var wire 32 1 x[2] [31:0] $end
     $var wire 32 2 x[3] [31:0] $end
     $var wire 32 3 x[4] [31:0] $end
     $var wire 32 4 x[5] [31:0] $end
     $var wire 32 5 x[6] [31:0] $end
     $var wire 32 6 x[7] [31:0] $end
     $var wire 32 7 x[8] [31:0] $end
     $var wire 32 8 x[9] [31:0] $end
     $var wire 32 9 x[10] [31:0] $end
     $var wire 32 : x[11] [31:0] $end
     $var wire 32 ; x[12] [31:0] $end
     $var wire 32 < x[13] [31:0] $end
     $var wire 32 = x[14] [31:0] $end
     $var wire 32 > x[15] [31:0] $end
     $var wire 32 ? x[16] [31:0] $end
     $var wire 32 @ x[17] [31:0] $end
     $var wire 32 A x[18] [31:0] $end
     $var wire 32 B x[19] [31:0] $end
     $var wire 32 C x[20] [31:0] $end
     $var wire 32 D x[21] [31:0] $end
     $var wire 32 E x[22] [31:0] $end
     $var wire 32 F x[23] [31:0] $end
     $var wire 32 G x[24] [31:0] $end
     $var wire 32 H x[25] [31:0] $end
     $var wire 32 I x[26] [31:0] $end
     $var wire 32 J x[27] [31:0] $end
     $var wire 32 K x[28] [31:0] $end
     $var wire 32 L x[29] [31:0] $end
     $var wire 32 M x[30] [31:0] $end
     $var wire 32 N x[31] [31:0] $end
     $scope module unnamedblk1 $end
      $var wire 32 j i [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00001001011001010000010100010011 #
b00001001011001010000010100010011 $
b0010011 %
b01010 &
b10110 '
b0000100 (
b000 )
0*
0+
0,
0-
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b01010 O
b10110 P
b00000000000000000000000010010110 Q
1R
1S
1T
b00 U
b0000 V
b00000000000000000000000000000000 W
b00000000000000000000000010010110 X
b00000000000000000000000010010110 Y
0Z
0[
0\
b00000001000000000000000000000000 ]
b00000001000000000000000000000000 ^
b00000000000000000000000000000000 _
0`
0a
b00000000000000000000000000100000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
1e
b00000000000000000000000000000000 f
b00000001000000000000000000000000 g
b00000000000000000000000000000000 h
b00000001000000000000000000000000 i
b00000000000000000000000000000000 j
b000000000000000000000 k
#20
b00001100100001011000010110010011 #
b00001100100001011000010110010011 $
b01011 &
b01000 '
b0000110 (
b01011 O
b01000 P
b00000000000000000000000011001000 Q
b00000000000000000000000011001000 X
b00000000000000000000000011001000 Y
1\
b00000001000000000000000000000100 ]
b00000001000000000000000000000100 ^
#40
0\
#60
b11111100111001101000011010010011 #
b11111100111001101000011010010011 $
b01101 &
b01110 '
b1111110 (
b01101 O
b01110 P
b11111111111111111111111111001110 Q
b11111111111111111111111111001110 X
b11111111111111111111111111001110 Y
1\
b00000001000000000000000000001000 ]
b00000001000000000000000000001000 ^
#80
0\
#100
b00000000101101010000011000110011 #
b00000000101101010000011000110011 $
b0110011 %
b01100 &
b01011 '
b0000000 (
1+
b00000000000000000000000010010110 .
b00000000000000000000000001100100 9
b00000000000000000000000010010110 :
b01010 O
b00000 P
b00000000000000000000000000000000 Q
0R
b00000000000000000000000001100100 W
b00000000000000000000000010010110 X
b00000000000000000000000011111010 Y
1\
b00000001000000000000000000001100 ]
b00000001000000000000000000001100 ^
b00000000000000000000000001100100 _
#120
0\
#140
b01000000101101010000011000110011 #
b01000000101101010000011000110011 $
b0100000 (
b0001 V
b11111111111111111111111111001110 Y
1\
b00000001000000000000000000010000 ]
b00000001000000000000000000010000 ^
#160
0\
#180
b00000000101101010001100001100011 #
b00000000101101010001100001100011 $
b1100011 %
b10000 &
b0000000 (
b001 )
1*
b10000 P
b00000000000000000000000000010000 Q
1R
0S
b0000 V
b00000001000000000000000000100100 Y
1[
1\
b00000001000000000000000000010100 ]
b00000001000000000000000000010100 ^
1`
#200
0\
#220
b11111110101101010000100011100011 #
b11111110101101010000100011100011 $
b10001 &
b1111111 (
b000 )
b11111111111111111111111111110000 Q
b00000001000000000000000000001000 Y
1\
b00000001000000000000000000011000 ]
b00000001000000000000000000011000 ^
0`
#240
0\
#260
b00000000101001011101100001100011 #
b00000000101001011101100001100011 $
b10000 &
b01010 '
b0000000 (
b101 )
b00000000000000000000000001100100 .
b01011 O
b00000000000000000000000000010000 Q
b00000000000000000000000010010110 W
b00000000000000000000000001100100 X
b00000001000000000000000000101100 Y
0[
1\
b00000001000000000000000000011100 ]
b00000001000000000000000000011100 ^
b00000000000000000000000010010110 _
1`
#280
0\
#300
b00000001000000000000000000110000 Y
1\
b00000001000000000000000000100000 ]
b00000001000000000000000000100000 ^
