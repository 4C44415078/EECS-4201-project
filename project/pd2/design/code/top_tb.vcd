$version Generated by VerilatedVcd $end
$timescale 1ns $end
 $scope module TOP $end
  $scope module $unit $end
   $var wire 32 = ZERO [31:0] $end
   $var wire 13 & btype_insn__Vstatic__imm_btype [12:0] $end
   $var wire 21 ' jtype_insn__Vstatic__imm_jtype [20:0] $end
   $scope module check_control_signal__Vstatic__unnamedblk1 $end
    $var wire 32 ( control_fail [31:0] $end
   $upscope $end
  $upscope $end
  $scope module top_tb $end
   $var wire 1 5 clk $end
   $var wire 1 : rst $end
   $var wire 32 ; DWIDTH [31:0] $end
   $var wire 32 ; AWIDTH [31:0] $end
   $var wire 7 6 opcode [6:0] $end
   $var wire 32 # insn [31:0] $end
   $var wire 32 ) imm [31:0] $end
   $var wire 7 * funct7 [6:0] $end
   $var wire 3 $ funct3 [2:0] $end
   $var wire 5 7 rd [4:0] $end
   $var wire 5 8 rs1 [4:0] $end
   $var wire 5 9 rs2 [4:0] $end
   $var wire 1 + pcsel $end
   $var wire 1 , immsel $end
   $var wire 1 - regwren $end
   $var wire 1 . rs1sel $end
   $var wire 1 / rs2sel $end
   $var wire 1 0 memren $end
   $var wire 1 1 memwren $end
   $var wire 2 2 wbsel [1:0] $end
   $var wire 4 3 alusel [3:0] $end
   $var wire 32 % pc [31:0] $end
   $var wire 7 4 actual_signal [6:0] $end
   $scope module dut_control $end
    $var wire 32 ; DWIDTH [31:0] $end
    $var wire 32 # insn_i [31:0] $end
    $var wire 7 6 opcode_i [6:0] $end
    $var wire 7 * funct7_i [6:0] $end
    $var wire 3 $ funct3_i [2:0] $end
    $var wire 1 + pcsel_o $end
    $var wire 1 , immsel_o $end
    $var wire 1 - regwren_o $end
    $var wire 1 . rs1sel_o $end
    $var wire 1 / rs2sel_o $end
    $var wire 1 0 memren_o $end
    $var wire 1 1 memwren_o $end
    $var wire 2 2 wbsel_o [1:0] $end
    $var wire 4 3 alusel_o [3:0] $end
   $upscope $end
   $scope module dut_decode $end
    $var wire 32 ; DWIDTH [31:0] $end
    $var wire 32 ; AWIDTH [31:0] $end
    $var wire 1 5 clk $end
    $var wire 1 : rst $end
    $var wire 32 # insn_i [31:0] $end
    $var wire 32 % pc_i [31:0] $end
    $var wire 32 % pc_o [31:0] $end
    $var wire 32 # insn_o [31:0] $end
    $var wire 7 6 opcode_o [6:0] $end
    $var wire 5 7 rd_o [4:0] $end
    $var wire 5 8 rs1_o [4:0] $end
    $var wire 5 9 rs2_o [4:0] $end
    $var wire 7 * funct7_o [6:0] $end
    $var wire 3 $ funct3_o [2:0] $end
    $var wire 5 < shamt_o [4:0] $end
    $var wire 32 ) imm_o [31:0] $end
   $upscope $end
   $scope module dut_igen $end
    $var wire 32 ; DWIDTH [31:0] $end
    $var wire 7 6 opcode_i [6:0] $end
    $var wire 32 # insn_i [31:0] $end
    $var wire 32 ) imm_o [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000011100110000001010110011 #
b000 $
b00000000000000000000000000000000 %
b0000000000000 &
b000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b0000000 *
0+
0,
1-
1.
1/
00
01
b00 2
b0000 3
b0011100 4
05
b0110011 6
b00101 7
b00110 8
b00111 9
0:
b00000000000000000000000000100000 ;
b00000 <
b00000000000000000000000000000000 =
#20
b01111111111111101000111000010011 #
b00000000000000000000011111111111 )
1,
0/
b0111000 4
15
b0010011 6
b11100 7
b11101 8
b00000 9
#40
05
#60
b10000000000011101000111000010011 #
b11111111111111111111100000000000 )
15
#80
05
#100
b00000000000011101000111000010011 #
b00000000000000000000000000000000 )
15
#120
05
#140
b00000001111111101101111000010011 #
b101 $
b00000000000000000000000000011111 )
b0110 3
15
#160
05
#180
b00100001111111101101111000010011 #
b0010000 *
b0111 3
15
#200
05
#220
b01111111111111101010111000000011 #
b010 $
b00000000000000000000011111111111 )
b0000000 *
10
b01 2
b0000 3
b0111010 4
15
b0000011 6
#240
05
#260
b01111110011000101010111110100011 #
0-
1/
00
11
b00 2
b0101101 4
15
b0100011 6
b00000 7
b00101 8
b00110 9
#280
05
#300
b11111110011000101000111011100011 #
b000 $
b1111111111100 &
b11111111111111111111111111111100 )
1+
01
b1101100 4
15
b1100011 6
#320
05
#340
b11111111111111111111001110110111 #
b111 $
b11111111111111111111000000000000 )
0+
1-
0.
0/
b11 2
b1111 3
b0110000 4
15
b0110111 6
b00111 7
b00000 8
b00000 9
#360
05
#380
b11111111111111111111001110010111 #
b00 2
b0000 3
15
b0010111 6
#400
05
#420
b01111111111111111111001111101111 #
b011111111111111111110 '
b00000000000011111111111111111110 )
1+
b10 2
b1110000 4
15
b1101111 6
#440
05
#460
15
